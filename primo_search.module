<?php
/**
 * @file
 * Implementation of default hooks for primo service integration.
 */

/**
 * Implements hook_menu().
 */
function primo_search_menu() {
  $items['admin/config/primo'] = array(
    'title' => 'Primo',
    'description' => 'Use primo service',
    'weight' => 1,
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/primo/search'] = array(
    'title' => 'Primo search',
    'description' => 'Administration page for the primo search service integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('primo_search_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'primo_search.admin.inc',
    'file path' => drupal_get_path('module', 'primo_search'),
  );
  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function primo_search_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_theme().
 */
function primo_search_theme($existing, $type, $theme, $path) {
  return array(
    'primo_search_item' => array(
      'variables' => array(),
      'template' => 'primo-search-item',
      'path' => $path . '/templates',
    ),
    'primo_search_grid' => array(
      'variables' => array(),
      'template' => 'primo-search-grid',
      'path' => $path . '/templates',
    ),
    'primo_image' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'alt' => NULL,
        'title' => NULL,
        'attributes' => array(),
        'remote' => NULL,
      ),
    ),
  );
}

/**
 * Theme image of the item based on the url and image style.
 *
 * @param $variables
 *   Default parameters for image theme: style name, image path.
 *
 * @return string
 *   Html code of the image.
 */
function theme_primo_image($variables) {
  $style_path = image_style_url($variables['style_name'], $variables['path']);

  if (!file_exists($style_path)) {
    $style = image_style_load($variables['style_name']);
    image_style_create_derivative($style, $variables['path'], $style_path);
  }
  $variables['path'] = $style_path;

  return theme('image', $variables);
}

/**
 * Fetch the link to the primo item based on its doc_number.
 *
 * @param $doc_number
 *   Unique identifier of the item on service.
 *
 * @return string
 *   Url on the primo search site.
 */
function _primo_search_title_link($doc_number) {
  $query = 'DABPR' . $doc_number;
  $params = array(
    'mode' => 'Basic',
    'vl(freeText0)' => $query,
    'fn' => 'search',
    'doc' => $query,
  );
  $http_query = drupal_http_build_query($params);
  $bib_link = variable_get('primo_search_lib_url', '');
  $search_query = implode('?', array($bib_link, $http_query));

  return $search_query;
}

/**
 * Get url of the book cover form the ADDI service based on book isbn.
 *
 * @param $isbn
 *   isbn identifier of a book.
 *
 * @return mixed
 *   image url or FALSE if the cover image is missing.
 */
function _primo_search_cover_url($isbn) {
  $service = new AdditionalInformationService(variable_get('addi_wsdl_url'), variable_get('addi_username'), variable_get('addi_group'), variable_get('addi_password'));
  $info = $service->getByIsbn($isbn);
  $image = (!empty($info)) ? $info[$isbn] : FALSE;

  return ($image) ? $image->detailUrl : FALSE;
}

/**
 * Download cover image of the book based on the it's isbn identifier.
 *
 * @param $isbn
 *   isbn identifier.
 *
 * @return mixed
 *   File path or FALSE if image is not accessible.
 */
function _primo_search_download_cover($isbn) {
  $destination = file_default_scheme() . '://covers' . DIRECTORY_SEPARATOR . $isbn . '.jpg';
  $retrieved_file = $destination;
  if (!is_file($destination)) {
    $retrieved_file = FALSE;
    $url = _primo_search_cover_url($isbn);
    if ($url) {
      $retrieved_file = system_retrieve_file($url, $destination, FALSE, FILE_EXISTS_REPLACE);
    }
  }
  return $retrieved_file;
}
